// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/40acres/40swap/daemon/bitcoin (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=mock.go -package=bitcoin . Client
//

// Package bitcoin is a generated GoMock package.
package bitcoin

import (
	context "context"
	reflect "reflect"

	wire "github.com/btcsuite/btcd/wire"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetFeeFromTxId mocks base method.
func (m *MockClient) GetFeeFromTxId(ctx context.Context, txId string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeeFromTxId", ctx, txId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeeFromTxId indicates an expected call of GetFeeFromTxId.
func (mr *MockClientMockRecorder) GetFeeFromTxId(ctx, txId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeeFromTxId", reflect.TypeOf((*MockClient)(nil).GetFeeFromTxId), ctx, txId)
}

// GetRecommendedFees mocks base method.
func (m *MockClient) GetRecommendedFees(ctx context.Context, speed Speed) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendedFees", ctx, speed)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendedFees indicates an expected call of GetRecommendedFees.
func (mr *MockClientMockRecorder) GetRecommendedFees(ctx, speed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendedFees", reflect.TypeOf((*MockClient)(nil).GetRecommendedFees), ctx, speed)
}

// GetTxFromOutpoint mocks base method.
func (m *MockClient) GetTxFromOutpoint(ctx context.Context, outpoint string) (*wire.MsgTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxFromOutpoint", ctx, outpoint)
	ret0, _ := ret[0].(*wire.MsgTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxFromOutpoint indicates an expected call of GetTxFromOutpoint.
func (mr *MockClientMockRecorder) GetTxFromOutpoint(ctx, outpoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxFromOutpoint", reflect.TypeOf((*MockClient)(nil).GetTxFromOutpoint), ctx, outpoint)
}

// PostRefund mocks base method.
func (m *MockClient) PostRefund(ctx context.Context, tx string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostRefund", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostRefund indicates an expected call of PostRefund.
func (mr *MockClientMockRecorder) PostRefund(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostRefund", reflect.TypeOf((*MockClient)(nil).PostRefund), ctx, tx)
}
