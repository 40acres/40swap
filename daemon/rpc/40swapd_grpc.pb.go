// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: 40swapd.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SwapService_SwapIn_FullMethodName                   = "/SwapService/SwapIn"
	SwapService_SwapOut_FullMethodName                  = "/SwapService/SwapOut"
	SwapService_GetSwapIn_FullMethodName                = "/SwapService/GetSwapIn"
	SwapService_GetSwapOut_FullMethodName               = "/SwapService/GetSwapOut"
	SwapService_RecoverReusedSwapAddress_FullMethodName = "/SwapService/RecoverReusedSwapAddress"
)

// SwapServiceClient is the client API for SwapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwapServiceClient interface {
	// RPC methods for initiating and querying swaps.
	SwapIn(ctx context.Context, in *SwapInRequest, opts ...grpc.CallOption) (*SwapInResponse, error)
	SwapOut(ctx context.Context, in *SwapOutRequest, opts ...grpc.CallOption) (*SwapOutResponse, error)
	GetSwapIn(ctx context.Context, in *GetSwapInRequest, opts ...grpc.CallOption) (*GetSwapInResponse, error)
	GetSwapOut(ctx context.Context, in *GetSwapOutRequest, opts ...grpc.CallOption) (*GetSwapOutResponse, error)
	RecoverReusedSwapAddress(ctx context.Context, in *RecoverReusedSwapAddressRequest, opts ...grpc.CallOption) (*RecoverReusedSwapAddressResponse, error)
}

type swapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSwapServiceClient(cc grpc.ClientConnInterface) SwapServiceClient {
	return &swapServiceClient{cc}
}

func (c *swapServiceClient) SwapIn(ctx context.Context, in *SwapInRequest, opts ...grpc.CallOption) (*SwapInResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SwapInResponse)
	err := c.cc.Invoke(ctx, SwapService_SwapIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapServiceClient) SwapOut(ctx context.Context, in *SwapOutRequest, opts ...grpc.CallOption) (*SwapOutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SwapOutResponse)
	err := c.cc.Invoke(ctx, SwapService_SwapOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapServiceClient) GetSwapIn(ctx context.Context, in *GetSwapInRequest, opts ...grpc.CallOption) (*GetSwapInResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSwapInResponse)
	err := c.cc.Invoke(ctx, SwapService_GetSwapIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapServiceClient) GetSwapOut(ctx context.Context, in *GetSwapOutRequest, opts ...grpc.CallOption) (*GetSwapOutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSwapOutResponse)
	err := c.cc.Invoke(ctx, SwapService_GetSwapOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapServiceClient) RecoverReusedSwapAddress(ctx context.Context, in *RecoverReusedSwapAddressRequest, opts ...grpc.CallOption) (*RecoverReusedSwapAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecoverReusedSwapAddressResponse)
	err := c.cc.Invoke(ctx, SwapService_RecoverReusedSwapAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwapServiceServer is the server API for SwapService service.
// All implementations must embed UnimplementedSwapServiceServer
// for forward compatibility.
type SwapServiceServer interface {
	// RPC methods for initiating and querying swaps.
	SwapIn(context.Context, *SwapInRequest) (*SwapInResponse, error)
	SwapOut(context.Context, *SwapOutRequest) (*SwapOutResponse, error)
	GetSwapIn(context.Context, *GetSwapInRequest) (*GetSwapInResponse, error)
	GetSwapOut(context.Context, *GetSwapOutRequest) (*GetSwapOutResponse, error)
	RecoverReusedSwapAddress(context.Context, *RecoverReusedSwapAddressRequest) (*RecoverReusedSwapAddressResponse, error)
	mustEmbedUnimplementedSwapServiceServer()
}

// UnimplementedSwapServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSwapServiceServer struct{}

func (UnimplementedSwapServiceServer) SwapIn(context.Context, *SwapInRequest) (*SwapInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapIn not implemented")
}
func (UnimplementedSwapServiceServer) SwapOut(context.Context, *SwapOutRequest) (*SwapOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapOut not implemented")
}
func (UnimplementedSwapServiceServer) GetSwapIn(context.Context, *GetSwapInRequest) (*GetSwapInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwapIn not implemented")
}
func (UnimplementedSwapServiceServer) GetSwapOut(context.Context, *GetSwapOutRequest) (*GetSwapOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwapOut not implemented")
}
func (UnimplementedSwapServiceServer) RecoverReusedSwapAddress(context.Context, *RecoverReusedSwapAddressRequest) (*RecoverReusedSwapAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverReusedSwapAddress not implemented")
}
func (UnimplementedSwapServiceServer) mustEmbedUnimplementedSwapServiceServer() {}
func (UnimplementedSwapServiceServer) testEmbeddedByValue()                     {}

// UnsafeSwapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwapServiceServer will
// result in compilation errors.
type UnsafeSwapServiceServer interface {
	mustEmbedUnimplementedSwapServiceServer()
}

func RegisterSwapServiceServer(s grpc.ServiceRegistrar, srv SwapServiceServer) {
	// If the following call pancis, it indicates UnimplementedSwapServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SwapService_ServiceDesc, srv)
}

func _SwapService_SwapIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwapInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapServiceServer).SwapIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwapService_SwapIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapServiceServer).SwapIn(ctx, req.(*SwapInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwapService_SwapOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwapOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapServiceServer).SwapOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwapService_SwapOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapServiceServer).SwapOut(ctx, req.(*SwapOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwapService_GetSwapIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwapInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapServiceServer).GetSwapIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwapService_GetSwapIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapServiceServer).GetSwapIn(ctx, req.(*GetSwapInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwapService_GetSwapOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwapOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapServiceServer).GetSwapOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwapService_GetSwapOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapServiceServer).GetSwapOut(ctx, req.(*GetSwapOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwapService_RecoverReusedSwapAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverReusedSwapAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapServiceServer).RecoverReusedSwapAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwapService_RecoverReusedSwapAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapServiceServer).RecoverReusedSwapAddress(ctx, req.(*RecoverReusedSwapAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SwapService_ServiceDesc is the grpc.ServiceDesc for SwapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SwapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SwapService",
	HandlerType: (*SwapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SwapIn",
			Handler:    _SwapService_SwapIn_Handler,
		},
		{
			MethodName: "SwapOut",
			Handler:    _SwapService_SwapOut_Handler,
		},
		{
			MethodName: "GetSwapIn",
			Handler:    _SwapService_GetSwapIn_Handler,
		},
		{
			MethodName: "GetSwapOut",
			Handler:    _SwapService_GetSwapOut_Handler,
		},
		{
			MethodName: "RecoverReusedSwapAddress",
			Handler:    _SwapService_RecoverReusedSwapAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "40swapd.proto",
}
