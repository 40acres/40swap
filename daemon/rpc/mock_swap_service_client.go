// Code generated by MockGen. DO NOT EDIT.
// Source: rpc/40swapd_grpc.pb.go

// Package rpc is a generated GoMock package.
package rpc

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSwapServiceClient is a mock of SwapServiceClient interface.
type MockSwapServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSwapServiceClientMockRecorder
}

// MockSwapServiceClientMockRecorder is the mock recorder for MockSwapServiceClient.
type MockSwapServiceClientMockRecorder struct {
	mock *MockSwapServiceClient
}

// NewMockSwapServiceClient creates a new mock instance.
func NewMockSwapServiceClient(ctrl *gomock.Controller) *MockSwapServiceClient {
	mock := &MockSwapServiceClient{ctrl: ctrl}
	mock.recorder = &MockSwapServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSwapServiceClient) EXPECT() *MockSwapServiceClientMockRecorder {
	return m.recorder
}

// GetSwapIn mocks base method.
func (m *MockSwapServiceClient) GetSwapIn(ctx context.Context, in *GetSwapInRequest, opts ...grpc.CallOption) (*GetSwapInResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSwapIn", varargs...)
	ret0, _ := ret[0].(*GetSwapInResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwapIn indicates an expected call of GetSwapIn.
func (mr *MockSwapServiceClientMockRecorder) GetSwapIn(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwapIn", reflect.TypeOf((*MockSwapServiceClient)(nil).GetSwapIn), varargs...)
}

// GetSwapOut mocks base method.
func (m *MockSwapServiceClient) GetSwapOut(ctx context.Context, in *GetSwapOutRequest, opts ...grpc.CallOption) (*GetSwapOutResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSwapOut", varargs...)
	ret0, _ := ret[0].(*GetSwapOutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwapOut indicates an expected call of GetSwapOut.
func (mr *MockSwapServiceClientMockRecorder) GetSwapOut(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwapOut", reflect.TypeOf((*MockSwapServiceClient)(nil).GetSwapOut), varargs...)
}

// RecoverReusedSwapAddress mocks base method.
func (m *MockSwapServiceClient) RecoverReusedSwapAddress(ctx context.Context, in *RecoverReusedSwapAddressRequest, opts ...grpc.CallOption) (*RecoverReusedSwapAddressResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RecoverReusedSwapAddress", varargs...)
	ret0, _ := ret[0].(*RecoverReusedSwapAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecoverReusedSwapAddress indicates an expected call of RecoverReusedSwapAddress.
func (mr *MockSwapServiceClientMockRecorder) RecoverReusedSwapAddress(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverReusedSwapAddress", reflect.TypeOf((*MockSwapServiceClient)(nil).RecoverReusedSwapAddress), varargs...)
}

// SwapIn mocks base method.
func (m *MockSwapServiceClient) SwapIn(ctx context.Context, in *SwapInRequest, opts ...grpc.CallOption) (*SwapInResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SwapIn", varargs...)
	ret0, _ := ret[0].(*SwapInResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwapIn indicates an expected call of SwapIn.
func (mr *MockSwapServiceClientMockRecorder) SwapIn(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwapIn", reflect.TypeOf((*MockSwapServiceClient)(nil).SwapIn), varargs...)
}

// SwapOut mocks base method.
func (m *MockSwapServiceClient) SwapOut(ctx context.Context, in *SwapOutRequest, opts ...grpc.CallOption) (*SwapOutResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SwapOut", varargs...)
	ret0, _ := ret[0].(*SwapOutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwapOut indicates an expected call of SwapOut.
func (mr *MockSwapServiceClientMockRecorder) SwapOut(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwapOut", reflect.TypeOf((*MockSwapServiceClient)(nil).SwapOut), varargs...)
}

// MockSwapServiceServer is a mock of SwapServiceServer interface.
type MockSwapServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSwapServiceServerMockRecorder
}

// MockSwapServiceServerMockRecorder is the mock recorder for MockSwapServiceServer.
type MockSwapServiceServerMockRecorder struct {
	mock *MockSwapServiceServer
}

// NewMockSwapServiceServer creates a new mock instance.
func NewMockSwapServiceServer(ctrl *gomock.Controller) *MockSwapServiceServer {
	mock := &MockSwapServiceServer{ctrl: ctrl}
	mock.recorder = &MockSwapServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSwapServiceServer) EXPECT() *MockSwapServiceServerMockRecorder {
	return m.recorder
}

// GetSwapIn mocks base method.
func (m *MockSwapServiceServer) GetSwapIn(arg0 context.Context, arg1 *GetSwapInRequest) (*GetSwapInResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwapIn", arg0, arg1)
	ret0, _ := ret[0].(*GetSwapInResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwapIn indicates an expected call of GetSwapIn.
func (mr *MockSwapServiceServerMockRecorder) GetSwapIn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwapIn", reflect.TypeOf((*MockSwapServiceServer)(nil).GetSwapIn), arg0, arg1)
}

// GetSwapOut mocks base method.
func (m *MockSwapServiceServer) GetSwapOut(arg0 context.Context, arg1 *GetSwapOutRequest) (*GetSwapOutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwapOut", arg0, arg1)
	ret0, _ := ret[0].(*GetSwapOutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwapOut indicates an expected call of GetSwapOut.
func (mr *MockSwapServiceServerMockRecorder) GetSwapOut(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwapOut", reflect.TypeOf((*MockSwapServiceServer)(nil).GetSwapOut), arg0, arg1)
}

// RecoverReusedSwapAddress mocks base method.
func (m *MockSwapServiceServer) RecoverReusedSwapAddress(arg0 context.Context, arg1 *RecoverReusedSwapAddressRequest) (*RecoverReusedSwapAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverReusedSwapAddress", arg0, arg1)
	ret0, _ := ret[0].(*RecoverReusedSwapAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecoverReusedSwapAddress indicates an expected call of RecoverReusedSwapAddress.
func (mr *MockSwapServiceServerMockRecorder) RecoverReusedSwapAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverReusedSwapAddress", reflect.TypeOf((*MockSwapServiceServer)(nil).RecoverReusedSwapAddress), arg0, arg1)
}

// SwapIn mocks base method.
func (m *MockSwapServiceServer) SwapIn(arg0 context.Context, arg1 *SwapInRequest) (*SwapInResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwapIn", arg0, arg1)
	ret0, _ := ret[0].(*SwapInResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwapIn indicates an expected call of SwapIn.
func (mr *MockSwapServiceServerMockRecorder) SwapIn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwapIn", reflect.TypeOf((*MockSwapServiceServer)(nil).SwapIn), arg0, arg1)
}

// SwapOut mocks base method.
func (m *MockSwapServiceServer) SwapOut(arg0 context.Context, arg1 *SwapOutRequest) (*SwapOutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwapOut", arg0, arg1)
	ret0, _ := ret[0].(*SwapOutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwapOut indicates an expected call of SwapOut.
func (mr *MockSwapServiceServerMockRecorder) SwapOut(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwapOut", reflect.TypeOf((*MockSwapServiceServer)(nil).SwapOut), arg0, arg1)
}

// mustEmbedUnimplementedSwapServiceServer mocks base method.
func (m *MockSwapServiceServer) mustEmbedUnimplementedSwapServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSwapServiceServer")
}

// mustEmbedUnimplementedSwapServiceServer indicates an expected call of mustEmbedUnimplementedSwapServiceServer.
func (mr *MockSwapServiceServerMockRecorder) mustEmbedUnimplementedSwapServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSwapServiceServer", reflect.TypeOf((*MockSwapServiceServer)(nil).mustEmbedUnimplementedSwapServiceServer))
}

// MockUnsafeSwapServiceServer is a mock of UnsafeSwapServiceServer interface.
type MockUnsafeSwapServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSwapServiceServerMockRecorder
}

// MockUnsafeSwapServiceServerMockRecorder is the mock recorder for MockUnsafeSwapServiceServer.
type MockUnsafeSwapServiceServerMockRecorder struct {
	mock *MockUnsafeSwapServiceServer
}

// NewMockUnsafeSwapServiceServer creates a new mock instance.
func NewMockUnsafeSwapServiceServer(ctrl *gomock.Controller) *MockUnsafeSwapServiceServer {
	mock := &MockUnsafeSwapServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSwapServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSwapServiceServer) EXPECT() *MockUnsafeSwapServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSwapServiceServer mocks base method.
func (m *MockUnsafeSwapServiceServer) mustEmbedUnimplementedSwapServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSwapServiceServer")
}

// mustEmbedUnimplementedSwapServiceServer indicates an expected call of mustEmbedUnimplementedSwapServiceServer.
func (mr *MockUnsafeSwapServiceServerMockRecorder) mustEmbedUnimplementedSwapServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSwapServiceServer", reflect.TypeOf((*MockUnsafeSwapServiceServer)(nil).mustEmbedUnimplementedSwapServiceServer))
}
