// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for GetSwapInResponseDtoOutcome.
const (
	EXPIRED  GetSwapInResponseDtoOutcome = "EXPIRED"
	REFUNDED GetSwapInResponseDtoOutcome = "REFUNDED"
	SUCCESS  GetSwapInResponseDtoOutcome = "SUCCESS"
)

// Defines values for GetSwapInResponseDtoStatus.
const (
	CONTRACTCLAIMEDUNCONFIRMED  GetSwapInResponseDtoStatus = "CONTRACT_CLAIMED_UNCONFIRMED"
	CONTRACTEXPIRED             GetSwapInResponseDtoStatus = "CONTRACT_EXPIRED"
	CONTRACTFUNDED              GetSwapInResponseDtoStatus = "CONTRACT_FUNDED"
	CONTRACTFUNDEDUNCONFIRMED   GetSwapInResponseDtoStatus = "CONTRACT_FUNDED_UNCONFIRMED"
	CONTRACTREFUNDEDUNCONFIRMED GetSwapInResponseDtoStatus = "CONTRACT_REFUNDED_UNCONFIRMED"
	CREATED                     GetSwapInResponseDtoStatus = "CREATED"
	DONE                        GetSwapInResponseDtoStatus = "DONE"
	INVOICEPAID                 GetSwapInResponseDtoStatus = "INVOICE_PAID"
)

// Defines values for GetSwapOutResponseDtoChain.
const (
	GetSwapOutResponseDtoChainBITCOIN GetSwapOutResponseDtoChain = "BITCOIN"
	GetSwapOutResponseDtoChainLIQUID  GetSwapOutResponseDtoChain = "LIQUID"
)

// Defines values for SwapInRequestDtoChain.
const (
	SwapInRequestDtoChainBITCOIN SwapInRequestDtoChain = "BITCOIN"
	SwapInRequestDtoChainLIQUID  SwapInRequestDtoChain = "LIQUID"
)

// Defines values for SwapOutRequestDtoChain.
const (
	BITCOIN SwapOutRequestDtoChain = "BITCOIN"
	LIQUID  SwapOutRequestDtoChain = "LIQUID"
)

// GetSwapInResponseDto defines model for GetSwapInResponseDto.
type GetSwapInResponseDto struct {
	ContractAddress    string                       `json:"contractAddress"`
	CreatedAt          string                       `json:"createdAt"`
	InputAmount        float32                      `json:"inputAmount"`
	LockTx             *string                      `json:"lockTx,omitempty"`
	Outcome            *GetSwapInResponseDtoOutcome `json:"outcome,omitempty"`
	OutputAmount       float32                      `json:"outputAmount"`
	RedeemScript       string                       `json:"redeemScript"`
	Status             GetSwapInResponseDtoStatus   `json:"status"`
	SwapId             string                       `json:"swapId"`
	TimeoutBlockHeight float32                      `json:"timeoutBlockHeight"`
}

// GetSwapInResponseDtoOutcome defines model for GetSwapInResponseDto.Outcome.
type GetSwapInResponseDtoOutcome string

// GetSwapInResponseDtoStatus defines model for GetSwapInResponseDto.Status.
type GetSwapInResponseDtoStatus string

// GetSwapOutResponseDto defines model for GetSwapOutResponseDto.
type GetSwapOutResponseDto struct {
	Chain        GetSwapOutResponseDtoChain `json:"chain"`
	ClaimPubKey  string                     `json:"claimPubKey"`
	InputAmount  float32                    `json:"inputAmount"`
	PreImageHash string                     `json:"preImageHash"`
}

// GetSwapOutResponseDtoChain defines model for GetSwapOutResponseDto.Chain.
type GetSwapOutResponseDtoChain string

// PsbtResponseDto defines model for PsbtResponseDto.
type PsbtResponseDto struct {
	Psbt string `json:"psbt"`
}

// SwapInRequestDto defines model for SwapInRequestDto.
type SwapInRequestDto struct {
	Chain           SwapInRequestDtoChain `json:"chain"`
	Invoice         string                `json:"invoice"`
	RefundPublicKey string                `json:"refundPublicKey"`
}

// SwapInRequestDtoChain defines model for SwapInRequestDto.Chain.
type SwapInRequestDtoChain string

// SwapOutRequestDto defines model for SwapOutRequestDto.
type SwapOutRequestDto struct {
	Chain        SwapOutRequestDtoChain `json:"chain"`
	ClaimPubKey  string                 `json:"claimPubKey"`
	InputAmount  float32                `json:"inputAmount"`
	PreImageHash string                 `json:"preImageHash"`
}

// SwapOutRequestDtoChain defines model for SwapOutRequestDto.Chain.
type SwapOutRequestDtoChain string

// TxRequestDto defines model for TxRequestDto.
type TxRequestDto struct {
	Tx string `json:"tx"`
}

// SwapInControllerGetRefundPsbtParams defines parameters for SwapInControllerGetRefundPsbt.
type SwapInControllerGetRefundPsbtParams struct {
	Address string `form:"address" json:"address"`
}

// SwapOutControllerGetClaimPsbtParams defines parameters for SwapOutControllerGetClaimPsbt.
type SwapOutControllerGetClaimPsbtParams struct {
	Address string `form:"address" json:"address"`
}

// SwapInControllerCreateSwapJSONRequestBody defines body for SwapInControllerCreateSwap for application/json ContentType.
type SwapInControllerCreateSwapJSONRequestBody = SwapInRequestDto

// SwapInControllerSendRefundTxJSONRequestBody defines body for SwapInControllerSendRefundTx for application/json ContentType.
type SwapInControllerSendRefundTxJSONRequestBody = TxRequestDto

// SwapOutControllerCreateSwapJSONRequestBody defines body for SwapOutControllerCreateSwap for application/json ContentType.
type SwapOutControllerCreateSwapJSONRequestBody = SwapOutRequestDto

// SwapOutControllerClaimSwapJSONRequestBody defines body for SwapOutControllerClaimSwap for application/json ContentType.
type SwapOutControllerClaimSwapJSONRequestBody = TxRequestDto

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ConfigurationControllerGetConfiguration request
	ConfigurationControllerGetConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SwapInControllerCreateSwapWithBody request with any body
	SwapInControllerCreateSwapWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SwapInControllerCreateSwap(ctx context.Context, body SwapInControllerCreateSwapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SwapInControllerGetSwap request
	SwapInControllerGetSwap(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SwapInControllerGetRefundPsbt request
	SwapInControllerGetRefundPsbt(ctx context.Context, id string, params *SwapInControllerGetRefundPsbtParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SwapInControllerSendRefundTxWithBody request with any body
	SwapInControllerSendRefundTxWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SwapInControllerSendRefundTx(ctx context.Context, id string, body SwapInControllerSendRefundTxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SwapOutControllerCreateSwapWithBody request with any body
	SwapOutControllerCreateSwapWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SwapOutControllerCreateSwap(ctx context.Context, body SwapOutControllerCreateSwapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SwapOutControllerGetSwap request
	SwapOutControllerGetSwap(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SwapOutControllerClaimSwapWithBody request with any body
	SwapOutControllerClaimSwapWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SwapOutControllerClaimSwap(ctx context.Context, id string, body SwapOutControllerClaimSwapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SwapOutControllerGetClaimPsbt request
	SwapOutControllerGetClaimPsbt(ctx context.Context, id string, params *SwapOutControllerGetClaimPsbtParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ConfigurationControllerGetConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigurationControllerGetConfigurationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SwapInControllerCreateSwapWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSwapInControllerCreateSwapRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SwapInControllerCreateSwap(ctx context.Context, body SwapInControllerCreateSwapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSwapInControllerCreateSwapRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SwapInControllerGetSwap(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSwapInControllerGetSwapRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SwapInControllerGetRefundPsbt(ctx context.Context, id string, params *SwapInControllerGetRefundPsbtParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSwapInControllerGetRefundPsbtRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SwapInControllerSendRefundTxWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSwapInControllerSendRefundTxRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SwapInControllerSendRefundTx(ctx context.Context, id string, body SwapInControllerSendRefundTxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSwapInControllerSendRefundTxRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SwapOutControllerCreateSwapWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSwapOutControllerCreateSwapRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SwapOutControllerCreateSwap(ctx context.Context, body SwapOutControllerCreateSwapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSwapOutControllerCreateSwapRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SwapOutControllerGetSwap(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSwapOutControllerGetSwapRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SwapOutControllerClaimSwapWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSwapOutControllerClaimSwapRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SwapOutControllerClaimSwap(ctx context.Context, id string, body SwapOutControllerClaimSwapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSwapOutControllerClaimSwapRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SwapOutControllerGetClaimPsbt(ctx context.Context, id string, params *SwapOutControllerGetClaimPsbtParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSwapOutControllerGetClaimPsbtRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewConfigurationControllerGetConfigurationRequest generates requests for ConfigurationControllerGetConfiguration
func NewConfigurationControllerGetConfigurationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSwapInControllerCreateSwapRequest calls the generic SwapInControllerCreateSwap builder with application/json body
func NewSwapInControllerCreateSwapRequest(server string, body SwapInControllerCreateSwapJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSwapInControllerCreateSwapRequestWithBody(server, "application/json", bodyReader)
}

// NewSwapInControllerCreateSwapRequestWithBody generates requests for SwapInControllerCreateSwap with any type of body
func NewSwapInControllerCreateSwapRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/swap/in")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSwapInControllerGetSwapRequest generates requests for SwapInControllerGetSwap
func NewSwapInControllerGetSwapRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/swap/in/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSwapInControllerGetRefundPsbtRequest generates requests for SwapInControllerGetRefundPsbt
func NewSwapInControllerGetRefundPsbtRequest(server string, id string, params *SwapInControllerGetRefundPsbtParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/swap/in/%s/refund-psbt", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address", runtime.ParamLocationQuery, params.Address); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSwapInControllerSendRefundTxRequest calls the generic SwapInControllerSendRefundTx builder with application/json body
func NewSwapInControllerSendRefundTxRequest(server string, id string, body SwapInControllerSendRefundTxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSwapInControllerSendRefundTxRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSwapInControllerSendRefundTxRequestWithBody generates requests for SwapInControllerSendRefundTx with any type of body
func NewSwapInControllerSendRefundTxRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/swap/in/%s/refund-tx", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSwapOutControllerCreateSwapRequest calls the generic SwapOutControllerCreateSwap builder with application/json body
func NewSwapOutControllerCreateSwapRequest(server string, body SwapOutControllerCreateSwapJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSwapOutControllerCreateSwapRequestWithBody(server, "application/json", bodyReader)
}

// NewSwapOutControllerCreateSwapRequestWithBody generates requests for SwapOutControllerCreateSwap with any type of body
func NewSwapOutControllerCreateSwapRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/swap/out")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSwapOutControllerGetSwapRequest generates requests for SwapOutControllerGetSwap
func NewSwapOutControllerGetSwapRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/swap/out/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSwapOutControllerClaimSwapRequest calls the generic SwapOutControllerClaimSwap builder with application/json body
func NewSwapOutControllerClaimSwapRequest(server string, id string, body SwapOutControllerClaimSwapJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSwapOutControllerClaimSwapRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSwapOutControllerClaimSwapRequestWithBody generates requests for SwapOutControllerClaimSwap with any type of body
func NewSwapOutControllerClaimSwapRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/swap/out/%s/claim", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSwapOutControllerGetClaimPsbtRequest generates requests for SwapOutControllerGetClaimPsbt
func NewSwapOutControllerGetClaimPsbtRequest(server string, id string, params *SwapOutControllerGetClaimPsbtParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/swap/out/%s/claim-psbt", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address", runtime.ParamLocationQuery, params.Address); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ConfigurationControllerGetConfigurationWithResponse request
	ConfigurationControllerGetConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigurationControllerGetConfigurationResponse, error)

	// SwapInControllerCreateSwapWithBodyWithResponse request with any body
	SwapInControllerCreateSwapWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SwapInControllerCreateSwapResponse, error)

	SwapInControllerCreateSwapWithResponse(ctx context.Context, body SwapInControllerCreateSwapJSONRequestBody, reqEditors ...RequestEditorFn) (*SwapInControllerCreateSwapResponse, error)

	// SwapInControllerGetSwapWithResponse request
	SwapInControllerGetSwapWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SwapInControllerGetSwapResponse, error)

	// SwapInControllerGetRefundPsbtWithResponse request
	SwapInControllerGetRefundPsbtWithResponse(ctx context.Context, id string, params *SwapInControllerGetRefundPsbtParams, reqEditors ...RequestEditorFn) (*SwapInControllerGetRefundPsbtResponse, error)

	// SwapInControllerSendRefundTxWithBodyWithResponse request with any body
	SwapInControllerSendRefundTxWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SwapInControllerSendRefundTxResponse, error)

	SwapInControllerSendRefundTxWithResponse(ctx context.Context, id string, body SwapInControllerSendRefundTxJSONRequestBody, reqEditors ...RequestEditorFn) (*SwapInControllerSendRefundTxResponse, error)

	// SwapOutControllerCreateSwapWithBodyWithResponse request with any body
	SwapOutControllerCreateSwapWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SwapOutControllerCreateSwapResponse, error)

	SwapOutControllerCreateSwapWithResponse(ctx context.Context, body SwapOutControllerCreateSwapJSONRequestBody, reqEditors ...RequestEditorFn) (*SwapOutControllerCreateSwapResponse, error)

	// SwapOutControllerGetSwapWithResponse request
	SwapOutControllerGetSwapWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SwapOutControllerGetSwapResponse, error)

	// SwapOutControllerClaimSwapWithBodyWithResponse request with any body
	SwapOutControllerClaimSwapWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SwapOutControllerClaimSwapResponse, error)

	SwapOutControllerClaimSwapWithResponse(ctx context.Context, id string, body SwapOutControllerClaimSwapJSONRequestBody, reqEditors ...RequestEditorFn) (*SwapOutControllerClaimSwapResponse, error)

	// SwapOutControllerGetClaimPsbtWithResponse request
	SwapOutControllerGetClaimPsbtWithResponse(ctx context.Context, id string, params *SwapOutControllerGetClaimPsbtParams, reqEditors ...RequestEditorFn) (*SwapOutControllerGetClaimPsbtResponse, error)
}

type ConfigurationControllerGetConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ConfigurationControllerGetConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfigurationControllerGetConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SwapInControllerCreateSwapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *GetSwapInResponseDto
}

// Status returns HTTPResponse.Status
func (r SwapInControllerCreateSwapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SwapInControllerCreateSwapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SwapInControllerGetSwapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSwapInResponseDto
}

// Status returns HTTPResponse.Status
func (r SwapInControllerGetSwapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SwapInControllerGetSwapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SwapInControllerGetRefundPsbtResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PsbtResponseDto
}

// Status returns HTTPResponse.Status
func (r SwapInControllerGetRefundPsbtResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SwapInControllerGetRefundPsbtResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SwapInControllerSendRefundTxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SwapInControllerSendRefundTxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SwapInControllerSendRefundTxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SwapOutControllerCreateSwapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *GetSwapOutResponseDto
}

// Status returns HTTPResponse.Status
func (r SwapOutControllerCreateSwapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SwapOutControllerCreateSwapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SwapOutControllerGetSwapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSwapOutResponseDto
}

// Status returns HTTPResponse.Status
func (r SwapOutControllerGetSwapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SwapOutControllerGetSwapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SwapOutControllerClaimSwapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SwapOutControllerClaimSwapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SwapOutControllerClaimSwapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SwapOutControllerGetClaimPsbtResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PsbtResponseDto
}

// Status returns HTTPResponse.Status
func (r SwapOutControllerGetClaimPsbtResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SwapOutControllerGetClaimPsbtResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ConfigurationControllerGetConfigurationWithResponse request returning *ConfigurationControllerGetConfigurationResponse
func (c *ClientWithResponses) ConfigurationControllerGetConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigurationControllerGetConfigurationResponse, error) {
	rsp, err := c.ConfigurationControllerGetConfiguration(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigurationControllerGetConfigurationResponse(rsp)
}

// SwapInControllerCreateSwapWithBodyWithResponse request with arbitrary body returning *SwapInControllerCreateSwapResponse
func (c *ClientWithResponses) SwapInControllerCreateSwapWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SwapInControllerCreateSwapResponse, error) {
	rsp, err := c.SwapInControllerCreateSwapWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSwapInControllerCreateSwapResponse(rsp)
}

func (c *ClientWithResponses) SwapInControllerCreateSwapWithResponse(ctx context.Context, body SwapInControllerCreateSwapJSONRequestBody, reqEditors ...RequestEditorFn) (*SwapInControllerCreateSwapResponse, error) {
	rsp, err := c.SwapInControllerCreateSwap(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSwapInControllerCreateSwapResponse(rsp)
}

// SwapInControllerGetSwapWithResponse request returning *SwapInControllerGetSwapResponse
func (c *ClientWithResponses) SwapInControllerGetSwapWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SwapInControllerGetSwapResponse, error) {
	rsp, err := c.SwapInControllerGetSwap(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSwapInControllerGetSwapResponse(rsp)
}

// SwapInControllerGetRefundPsbtWithResponse request returning *SwapInControllerGetRefundPsbtResponse
func (c *ClientWithResponses) SwapInControllerGetRefundPsbtWithResponse(ctx context.Context, id string, params *SwapInControllerGetRefundPsbtParams, reqEditors ...RequestEditorFn) (*SwapInControllerGetRefundPsbtResponse, error) {
	rsp, err := c.SwapInControllerGetRefundPsbt(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSwapInControllerGetRefundPsbtResponse(rsp)
}

// SwapInControllerSendRefundTxWithBodyWithResponse request with arbitrary body returning *SwapInControllerSendRefundTxResponse
func (c *ClientWithResponses) SwapInControllerSendRefundTxWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SwapInControllerSendRefundTxResponse, error) {
	rsp, err := c.SwapInControllerSendRefundTxWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSwapInControllerSendRefundTxResponse(rsp)
}

func (c *ClientWithResponses) SwapInControllerSendRefundTxWithResponse(ctx context.Context, id string, body SwapInControllerSendRefundTxJSONRequestBody, reqEditors ...RequestEditorFn) (*SwapInControllerSendRefundTxResponse, error) {
	rsp, err := c.SwapInControllerSendRefundTx(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSwapInControllerSendRefundTxResponse(rsp)
}

// SwapOutControllerCreateSwapWithBodyWithResponse request with arbitrary body returning *SwapOutControllerCreateSwapResponse
func (c *ClientWithResponses) SwapOutControllerCreateSwapWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SwapOutControllerCreateSwapResponse, error) {
	rsp, err := c.SwapOutControllerCreateSwapWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSwapOutControllerCreateSwapResponse(rsp)
}

func (c *ClientWithResponses) SwapOutControllerCreateSwapWithResponse(ctx context.Context, body SwapOutControllerCreateSwapJSONRequestBody, reqEditors ...RequestEditorFn) (*SwapOutControllerCreateSwapResponse, error) {
	rsp, err := c.SwapOutControllerCreateSwap(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSwapOutControllerCreateSwapResponse(rsp)
}

// SwapOutControllerGetSwapWithResponse request returning *SwapOutControllerGetSwapResponse
func (c *ClientWithResponses) SwapOutControllerGetSwapWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SwapOutControllerGetSwapResponse, error) {
	rsp, err := c.SwapOutControllerGetSwap(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSwapOutControllerGetSwapResponse(rsp)
}

// SwapOutControllerClaimSwapWithBodyWithResponse request with arbitrary body returning *SwapOutControllerClaimSwapResponse
func (c *ClientWithResponses) SwapOutControllerClaimSwapWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SwapOutControllerClaimSwapResponse, error) {
	rsp, err := c.SwapOutControllerClaimSwapWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSwapOutControllerClaimSwapResponse(rsp)
}

func (c *ClientWithResponses) SwapOutControllerClaimSwapWithResponse(ctx context.Context, id string, body SwapOutControllerClaimSwapJSONRequestBody, reqEditors ...RequestEditorFn) (*SwapOutControllerClaimSwapResponse, error) {
	rsp, err := c.SwapOutControllerClaimSwap(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSwapOutControllerClaimSwapResponse(rsp)
}

// SwapOutControllerGetClaimPsbtWithResponse request returning *SwapOutControllerGetClaimPsbtResponse
func (c *ClientWithResponses) SwapOutControllerGetClaimPsbtWithResponse(ctx context.Context, id string, params *SwapOutControllerGetClaimPsbtParams, reqEditors ...RequestEditorFn) (*SwapOutControllerGetClaimPsbtResponse, error) {
	rsp, err := c.SwapOutControllerGetClaimPsbt(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSwapOutControllerGetClaimPsbtResponse(rsp)
}

// ParseConfigurationControllerGetConfigurationResponse parses an HTTP response from a ConfigurationControllerGetConfigurationWithResponse call
func ParseConfigurationControllerGetConfigurationResponse(rsp *http.Response) (*ConfigurationControllerGetConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfigurationControllerGetConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSwapInControllerCreateSwapResponse parses an HTTP response from a SwapInControllerCreateSwapWithResponse call
func ParseSwapInControllerCreateSwapResponse(rsp *http.Response) (*SwapInControllerCreateSwapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SwapInControllerCreateSwapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest GetSwapInResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseSwapInControllerGetSwapResponse parses an HTTP response from a SwapInControllerGetSwapWithResponse call
func ParseSwapInControllerGetSwapResponse(rsp *http.Response) (*SwapInControllerGetSwapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SwapInControllerGetSwapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSwapInResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSwapInControllerGetRefundPsbtResponse parses an HTTP response from a SwapInControllerGetRefundPsbtWithResponse call
func ParseSwapInControllerGetRefundPsbtResponse(rsp *http.Response) (*SwapInControllerGetRefundPsbtResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SwapInControllerGetRefundPsbtResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PsbtResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSwapInControllerSendRefundTxResponse parses an HTTP response from a SwapInControllerSendRefundTxWithResponse call
func ParseSwapInControllerSendRefundTxResponse(rsp *http.Response) (*SwapInControllerSendRefundTxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SwapInControllerSendRefundTxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSwapOutControllerCreateSwapResponse parses an HTTP response from a SwapOutControllerCreateSwapWithResponse call
func ParseSwapOutControllerCreateSwapResponse(rsp *http.Response) (*SwapOutControllerCreateSwapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SwapOutControllerCreateSwapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest GetSwapOutResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseSwapOutControllerGetSwapResponse parses an HTTP response from a SwapOutControllerGetSwapWithResponse call
func ParseSwapOutControllerGetSwapResponse(rsp *http.Response) (*SwapOutControllerGetSwapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SwapOutControllerGetSwapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSwapOutResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSwapOutControllerClaimSwapResponse parses an HTTP response from a SwapOutControllerClaimSwapWithResponse call
func ParseSwapOutControllerClaimSwapResponse(rsp *http.Response) (*SwapOutControllerClaimSwapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SwapOutControllerClaimSwapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSwapOutControllerGetClaimPsbtResponse parses an HTTP response from a SwapOutControllerGetClaimPsbtWithResponse call
func ParseSwapOutControllerGetClaimPsbtResponse(rsp *http.Response) (*SwapOutControllerGetClaimPsbtResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SwapOutControllerGetClaimPsbtResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PsbtResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
