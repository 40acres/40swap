// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/40acres/40swap/daemon/lightning (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=mock.go -package=lightning . Client
//

// Package lightning is a generated GoMock package.
package lightning

import (
	context "context"
	reflect "reflect"
	time "time"

	decimal "github.com/shopspring/decimal"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GenerateInvoice mocks base method.
func (m *MockClient) GenerateInvoice(arg0 context.Context, arg1 decimal.Decimal, arg2 time.Duration, arg3 string) (string, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateInvoice", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateInvoice indicates an expected call of GenerateInvoice.
func (mr *MockClientMockRecorder) GenerateInvoice(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateInvoice", reflect.TypeOf((*MockClient)(nil).GenerateInvoice), arg0, arg1, arg2, arg3)
}

// MonitorPaymentReception mocks base method.
func (m *MockClient) MonitorPaymentReception(arg0 context.Context, arg1 []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonitorPaymentReception", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MonitorPaymentReception indicates an expected call of MonitorPaymentReception.
func (mr *MockClientMockRecorder) MonitorPaymentReception(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonitorPaymentReception", reflect.TypeOf((*MockClient)(nil).MonitorPaymentReception), arg0, arg1)
}

// MonitorPaymentRequest mocks base method.
func (m *MockClient) MonitorPaymentRequest(arg0 context.Context, arg1 string) (string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonitorPaymentRequest", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MonitorPaymentRequest indicates an expected call of MonitorPaymentRequest.
func (mr *MockClientMockRecorder) MonitorPaymentRequest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonitorPaymentRequest", reflect.TypeOf((*MockClient)(nil).MonitorPaymentRequest), arg0, arg1)
}

// PayInvoice mocks base method.
func (m *MockClient) PayInvoice(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayInvoice", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PayInvoice indicates an expected call of PayInvoice.
func (mr *MockClientMockRecorder) PayInvoice(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayInvoice", reflect.TypeOf((*MockClient)(nil).PayInvoice), arg0, arg1)
}
