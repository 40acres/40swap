// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/40acres/40swap/daemon/lib/lightning (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=mock.go -package=lightning . Client
//

// Package lightning is a generated GoMock package.
package lightning

import (
	context "context"
	reflect "reflect"
	time "time"

	decimal "github.com/shopspring/decimal"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GenerateInvoice mocks base method.
func (m *MockClient) GenerateInvoice(ctx context.Context, amountSats decimal.Decimal, expiry time.Duration, memo string) (string, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateInvoice", ctx, amountSats, expiry, memo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateInvoice indicates an expected call of GenerateInvoice.
func (mr *MockClientMockRecorder) GenerateInvoice(ctx, amountSats, expiry, memo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateInvoice", reflect.TypeOf((*MockClient)(nil).GenerateInvoice), ctx, amountSats, expiry, memo)
}

// GetGraphStatus mocks base method.
func (m *MockClient) GetGraphStatus(ctx context.Context) (*GraphStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGraphStatus", ctx)
	ret0, _ := ret[0].(*GraphStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGraphStatus indicates an expected call of GetGraphStatus.
func (mr *MockClientMockRecorder) GetGraphStatus(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGraphStatus", reflect.TypeOf((*MockClient)(nil).GetGraphStatus), ctx)
}

// MonitorPaymentReception mocks base method.
func (m *MockClient) MonitorPaymentReception(ctx context.Context, rhash []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonitorPaymentReception", ctx, rhash)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MonitorPaymentReception indicates an expected call of MonitorPaymentReception.
func (mr *MockClientMockRecorder) MonitorPaymentReception(ctx, rhash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonitorPaymentReception", reflect.TypeOf((*MockClient)(nil).MonitorPaymentReception), ctx, rhash)
}

// MonitorPaymentRequest mocks base method.
func (m *MockClient) MonitorPaymentRequest(ctx context.Context, paymentHash string) (string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonitorPaymentRequest", ctx, paymentHash)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MonitorPaymentRequest indicates an expected call of MonitorPaymentRequest.
func (mr *MockClientMockRecorder) MonitorPaymentRequest(ctx, paymentHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonitorPaymentRequest", reflect.TypeOf((*MockClient)(nil).MonitorPaymentRequest), ctx, paymentHash)
}

// PayInvoice mocks base method.
func (m *MockClient) PayInvoice(ctx context.Context, paymentRequest string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayInvoice", ctx, paymentRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// PayInvoice indicates an expected call of PayInvoice.
func (mr *MockClientMockRecorder) PayInvoice(ctx, paymentRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayInvoice", reflect.TypeOf((*MockClient)(nil).PayInvoice), ctx, paymentRequest)
}
